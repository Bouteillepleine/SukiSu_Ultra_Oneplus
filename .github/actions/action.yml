name: Build OnePlus Kernel with SukiSU Ultra

inputs:
  model:
    description: 'Device model code'
    required: true
  soc:
    description: 'SoC platform'
    required: true
  branch:
    description: 'Kernel source branch'
    required: true
  manifest:
    description: 'Repo manifest file or URL'
    required: true
  android_version:
    description: 'Android version (e.g., android14)'
    required: true
  kernel_version:
    description: 'Kernel version (e.g., 6.1)'
    required: true
  ksun_branch:
    description: 'KernelSU branch'
    required: false
    default: 'stable'
  susfs_branch:
    description: 'SUSFS branch (auto-resolved if empty)'
    required: false
    default: ''
  KSU_META:
    description: 'SukiSU Ultra metadata (branch/tag/hash)'
    required: false
    default: 'susfs-main/⚡Ultra⚡/'
  HOOK:
    description: 'Hook type (kprobe/manual/tracepoint)'
    required: false
    default: 'manual'
  LSM:
    description: 'Enable Baseband Guard LSM (true/false)'
    required: false
    default: 'false'
  optimize_level:
    description: 'Optimization level (O2/O3)'
    required: false
    default: 'O2'
  github_token:
    description: 'GitHub token for API access'
    required: true

outputs:
  kernel_version:
    description: 'Built kernel version'
    value: ${{ steps.stats.outputs.kernel_version }}
  ksu_version:
    description: 'KernelSU version'
    value: ${{ steps.save_metadata.outputs.ksu_version }}
  susfs_version:
    description: 'SUSFS version'
    value: ${{ steps.save_metadata.outputs.susfs_version }}
  image_sha256:
    description: 'Kernel image SHA256'
    value: ${{ steps.stats.outputs.image_sha256 }}
  package_name:
    description: 'Package filename (without .zip)'
    value: ${{ steps.package.outputs.name }}
  artifact_name:
    description: 'Artifact name (for download)'
    value: ${{ steps.package.outputs.artifact_name }}
  package_size:
    description: 'Package size in MB'
    value: ${{ steps.package.outputs.size }}
  path:
    description: 'Full path to package zip'
    value: ${{ steps.package.outputs.path }}
  filename:
    description: 'Package filename (with .zip)'
    value: ${{ steps.package.outputs.filename }}

runs:
  using: composite
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Validate inputs"
        
        # Check required inputs
        for var in MODEL SOC BRANCH MANIFEST ANDROID_VERSION KERNEL_VERSION OPTIMIZE_LEVEL; do
          val="${!var:-}"
          if [[ -z "$val" ]]; then
            echo "::error::${var} is required"
            exit 1
          fi
        done
        
        # Validate formats
        if ! [[ "$SOC" =~ ^[A-Za-z0-9_-]+$ ]]; then
          echo "::error::soc contains invalid characters"
          exit 1
        fi
        
        if ! [[ "$BRANCH" =~ ^[A-Za-z0-9._/-]+$ ]]; then
          echo "::error::branch contains invalid characters"
          exit 1
        fi
        
        # Validate manifest
        if [[ "$MANIFEST" == http*://* ]]; then
          [[ "$MANIFEST" =~ ^https:// ]] || { echo "::error::Manifest must be HTTPS"; exit 1; }
          [[ "$MANIFEST" =~ \.xml($|\?) ]] || { echo "::error::Manifest must be XML"; exit 1; }
        else
          [[ "$MANIFEST" =~ \.xml$ ]] || { echo "::error::Manifest must end with .xml"; exit 1; }
          [[ ! "$MANIFEST" =~ [[:space:]] ]] || { echo "::error::Manifest cannot contain spaces"; exit 1; }
        fi
        
        # Validate choices
        case "$OPTIMIZE_LEVEL" in
          O2|O3) ;;
          *) echo "::error::optimize_level must be O2 or O3"; exit 1 ;;
        esac
        
        case "$HOOK" in
          kprobe|manual|tracepoint) ;;
          *) echo "::error::Invalid hook type: $HOOK"; exit 1 ;;
        esac
        
        case "$LSM" in
          true|false) ;;
          *) echo "::error::LSM must be 'true' or 'false'"; exit 1 ;;
        esac
        
        echo "✅ Input validation passed"
        echo "::endgroup::"
      env:
        MODEL: ${{ inputs.model }}
        SOC: ${{ inputs.soc }}
        BRANCH: ${{ inputs.branch }}
        MANIFEST: ${{ inputs.manifest }}
        ANDROID_VERSION: ${{ inputs.android_version }}
        KERNEL_VERSION: ${{ inputs.kernel_version }}
        OPTIMIZE_LEVEL: ${{ inputs.optimize_level }}
        HOOK: ${{ inputs.HOOK }}
        LSM: ${{ inputs.LSM }}

    - name: Setup Environment
      shell: bash
      run: |
        set -euo pipefail
        echo "KANDROID_VERSION=${{ inputs.android_version }}" >> "$GITHUB_ENV"
        echo "KERNEL_VERSION=${{ inputs.kernel_version }}" >> "$GITHUB_ENV"
        echo "CONFIG=${{ inputs.model }}" >> "$GITHUB_ENV"
        echo "BUILD_DATE=$(date -u +%Y%m%d)" >> "$GITHUB_ENV"

    - name: Install Dependencies
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Install dependencies"
        
        sudo apt-get -o Acquire::Retries=3 update -qq
        sudo DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
          git curl ca-certificates build-essential clang lld flex bison \
          libelf-dev libssl-dev libncurses-dev zlib1g-dev liblz4-tool \
          libxml2-utils rsync unzip dwarves file python3 jq llvm repo
        sudo apt-get clean
        
        echo "::endgroup::"

    - name: Configure Git
      shell: bash
      run: |
        git config --global user.name "Bouteille"
        git config --global user.email "Bouteille@qq.com"
        git config --global advice.detachedHead false

    - name: Setup Repo Tool
      shell: bash
      run: |
        set -euo pipefail
        REPO="/usr/local/bin/repo"
        if [ ! -x "$REPO" ]; then
          sudo curl -s https://storage.googleapis.com/git-repo-downloads/repo -o "$REPO"
          sudo chmod +x "$REPO"
        fi
        echo "REPO=$REPO" >> "$GITHUB_ENV"

    - name: Clone AnyKernel3
      shell: bash
      run: |
        set -euo pipefail
        
        if ! git clone https://github.com/Bouteillepleine/AnyKernel3.git \
          -b gki-2.0 --depth=1 --single-branch 2>/dev/null; then
          
          echo "::warning::HTTPS clone failed, trying git:// protocol"
          git clone git://github.com/Bouteillepleine/AnyKernel3.git \
            -b gki-2.0 --depth=1 --single-branch
        fi

    - name: Prepare Manifest Fallback
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p "$GITHUB_WORKSPACE/.repo/manifests_fallback"
        
        if [[ "$MANIFEST" == https://* ]]; then
          FILE_BASENAME="custom_$MODEL"
          curl -Ls "$MANIFEST" -o "$GITHUB_WORKSPACE/.repo/manifests_fallback/${FILE_BASENAME}.xml"
          echo "FILE=${FILE_BASENAME}" >> "$GITHUB_ENV"
        else
          FILE_BASENAME="${MANIFEST%.xml}"
          echo "FILE=${FILE_BASENAME}" >> "$GITHUB_ENV"
        fi
      env:
        MANIFEST: ${{ inputs.manifest }}
        MODEL: ${{ inputs.model }}

    - name: Initialize Kernel Source
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p "$CONFIG"
        cd "$CONFIG"
        
        export REPO_TRACE=0
        
        echo "Initializing kernel repo..."
        if [[ "$MANIFEST" == https://* ]]; then
          mkdir -p .repo/manifests
          curl -Ls "$MANIFEST" -o .repo/manifests/temp_manifest.xml
          "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git \
            -b "oneplus/$SOC" -m temp_manifest.xml \
            --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        else
          "$REPO" init -u https://github.com/OnePlusOSS/kernel_manifest.git \
            -b "$BRANCH" -m "$MANIFEST" \
            --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags
        fi
        
        echo "Syncing sources..."
        "$REPO" sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc) --fail-fast
      env:
        CONFIG: ${{ inputs.model }}
        MANIFEST: ${{ inputs.manifest }}
        SOC: ${{ inputs.soc }}
        BRANCH: ${{ inputs.branch }}
        REPO: ${{ env.REPO }}

    - name: Mirror Manifest
      if: ${{ inputs.manifest != '' && !startsWith(inputs.manifest, 'https://') }}
      shell: bash
      run: |
        mkdir -p "$GITHUB_WORKSPACE/.repo/manifests_fallback"
        SRC="$GITHUB_WORKSPACE/$CONFIG/.repo/manifests/$MANIFEST"
        [ -f "$SRC" ] && cp -f "$SRC" "$GITHUB_WORKSPACE/.repo/manifests_fallback/$MANIFEST"
      env:
        CONFIG: ${{ inputs.model }}
        MANIFEST: ${{ inputs.manifest }}

    - name: Clean ABI Exports
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform"
        rm -f common/android/abi_gki_protected_exports_* 2>/dev/null || true
        rm -f msm-kernel/android/abi_gki_protected_exports_* 2>/dev/null || true
      env:
        CONFIG: ${{ inputs.model }}

    - name: Detect Kernel Version
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform/common"
        
        V=$(grep -m1 '^VERSION *=' Makefile | awk '{print $3}' || echo "0")
        P=$(grep -m1 '^PATCHLEVEL *=' Makefile | awk '{print $3}' || echo "0")
        S=$(grep -m1 '^SUBLEVEL *=' Makefile | awk '{print $3}' || echo "0")
        
        echo "TKERNEL_VERSION=$V.$P.$S" >> "$GITHUB_ENV"
        echo "Detected kernel version: $V.$P.$S"
      env:
        CONFIG: ${{ inputs.model }}

    - name: Resolve SUSFS Branch
      shell: bash
      run: |
        set -euo pipefail
        
        if [[ -n "$SUSFS_BRANCH_INPUT" ]]; then
          SUSFS_BRANCH="$SUSFS_BRANCH_INPUT"
          echo "Using provided SUSFS branch: $SUSFS_BRANCH"
        else
          declare -A map=(
            ["android12-5.10"]="gki-android12-5.10"
            ["android13-5.10"]="gki-android13-5.10"
            ["android13-5.15"]="gki-android13-5.15"
            ["android14-5.15"]="gki-android14-5.15"
            ["android14-6.1"]="gki-android14-6.1"
            ["android15-6.6"]="gki-android15-6.6"
          )
          
          key="${KANDROID_VERSION}-${KERNEL_VERSION}"
          
          if [[ -z "${map[$key]+_}" ]]; then
            echo "::error::Unsupported Android/Kernel combo: $key"
            exit 1
          fi
          
          SUSFS_BRANCH="${map[$key]}"
          echo "Auto-resolved SUSFS branch: $SUSFS_BRANCH"
        fi
        
        echo "SUSFS_KERNEL_BRANCH=$SUSFS_BRANCH" >> "$GITHUB_ENV"
      env:
        SUSFS_BRANCH_INPUT: ${{ inputs.susfs_branch }}
        KANDROID_VERSION: ${{ inputs.android_version }}
        KERNEL_VERSION: ${{ inputs.kernel_version }}

    - name: Set Branding
      shell: bash
      run: |
        echo "CUSTOM_LOCALVERSION=-${KANDROID_VERSION}-OnePlus-UltraBolt" >> "$GITHUB_ENV"
      env:
        KANDROID_VERSION: ${{ inputs.android_version }}

    - name: Add SukiSU Ultra
      shell: bash
      run: |
        set -euo pipefail
        export LC_ALL=C.UTF-8
        
        cd "$CONFIG/kernel_platform"
        
        IFS='/' read -r BRANCH_NAME CUSTOM_TAG MANUAL_HASH <<< "$KSU_META"
        [[ -z "$BRANCH_NAME" ]] && BRANCH_NAME="susfs-main"
        
        echo "KSU_BRANCH=$BRANCH_NAME" >> "$GITHUB_ENV"
        
        curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" -o /tmp/sukisu_setup.sh
        bash /tmp/sukisu_setup.sh "$BRANCH_NAME"
        
        cd ./KernelSU
        
        if [[ -n "$MANUAL_HASH" ]]; then
          git fetch origin "$BRANCH_NAME" --depth=50
          git checkout "$MANUAL_HASH"
        fi
        
        KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
        echo "KSUVER=$KSU_VERSION" >> "$GITHUB_ENV"
      env:
        CONFIG: ${{ inputs.model }}
        KSU_META: ${{ inputs.KSU_META }}

    - name: Apply SUSFS Patches
      id: susfs_patch
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG"
        
        git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_KERNEL_BRANCH" --depth=1
        git clone https://github.com/ShirkNeko/SukiSU_patch.git --depth=1
        
        cd kernel_platform
        
        PATCH_FILE="50_add_susfs_in_gki-${KANDROID_VERSION}-${KERNEL_VERSION}.patch"
        
        cp "../susfs4ksu/kernel_patches/$PATCH_FILE" ./common/
        cp -r ../susfs4ksu/kernel_patches/fs/* ./common/fs/
        cp -r ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
        
        cd ./common
        
        GKI_V="${KANDROID_VERSION}-${KERNEL_VERSION}"
        SUBLEVEL=$(grep '^SUBLEVEL *=' Makefile | head -n1 | cut -d= -f2 | tr -d ' ' || echo "0")
        
        if [ "$GKI_V" = "android13-5.15" ] && [ "$SUBLEVEL" -lt 123 ]; then
          curl -Lo fix_5.15.legacy.patch --retry 5 \
            https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/fix_5.15.legacy
          patch -p1 < fix_5.15.legacy.patch
        fi
        
        if [[ "$KERNEL_VERSION" = "6.6" ]]; then
          if ! grep -q 'common-modules/trusty' "$GITHUB_WORKSPACE/.repo/manifests_fallback/${FILE}.xml" 2>/dev/null; then
            if [[ "$(printf '%s\n' "$TKERNEL_VERSION" "6.6.30" | sort -V | head -n1)" = "$TKERNEL_VERSION" ]]; then
              sed -i 's/-32,12 +32,38/-32,11 +32,37/g' "$PATCH_FILE"
              sed -i '/#include <trace\/hooks\/fs.h>/d' "$PATCH_FILE"
            fi
          fi
        fi
        
        if ! patch -p1 -F 3 --no-backup-if-mismatch < "$PATCH_FILE"; then
          git init >/dev/null 2>&1 || true
          git add -A
          git commit -qm base || true
          git apply --3way "../susfs4ksu/kernel_patches/$PATCH_FILE"
        fi
      env:
        CONFIG: ${{ inputs.model }}
        SUSFS_KERNEL_BRANCH: ${{ env.SUSFS_KERNEL_BRANCH }}
        KANDROID_VERSION: ${{ inputs.android_version }}
        KERNEL_VERSION: ${{ inputs.kernel_version }}
        TKERNEL_VERSION: ${{ env.TKERNEL_VERSION }}
        FILE: ${{ env.FILE }}

    - name: Upload Patch Rejects
      if: failure() && steps.susfs_patch.conclusion == 'failure'
      uses: actions/upload-artifact@v4
      with:
        name: patch-rejects-${{ inputs.model }}
        path: ${{ inputs.model }}/kernel_platform/common/**/*.rej
        if-no-files-found: ignore
        retention-days: 7

    - name: Record SUSFS Version
      shell: bash
      run: |
        cd "$CONFIG/susfs4ksu"
        SUSVER=$(git rev-parse --short HEAD || echo "unknown")
        echo "SUSVER=$SUSVER" >> "$GITHUB_ENV"
      env:
        CONFIG: ${{ inputs.model }}

    - name: Apply Hide Patches
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/common"
        cp ../../SukiSU_patch/69_hide_stuff.patch ./
        patch -p1 -F 3 < 69_hide_stuff.patch
      env:
        CONFIG: ${{ inputs.model }}

    - name: Apply Hook
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform/common"
        
        case "$HOOK" in
          kprobe)
            echo "HOOK_TYPE=kprobe" >> "$GITHUB_ENV"
            ;;
          manual)
            cp ../../SukiSU_patch/hooks/scope_min_manual_hooks_v1.5.patch ./
            patch -p1 -F 3 < scope_min_manual_hooks_v1.5.patch
            echo "HOOK_TYPE=manual" >> "$GITHUB_ENV"
            ;;
          tracepoint)
            cp ../../SukiSU_patch/hooks/sukisu_tracepoint_hooks_v1.1.patch ./
            patch -p1 -F 3 < sukisu_tracepoint_hooks_v1.1.patch
            echo "HOOK_TYPE=tracepoint" >> "$GITHUB_ENV"
            ;;
        esac
      env:
        CONFIG: ${{ inputs.model }}
        HOOK: ${{ inputs.HOOK }}

    - name: Apply LSM
      if: ${{ inputs.LSM == 'true' }}
      shell: bash
      run: |
        cd "$CONFIG/kernel_platform/common"
        
        curl -LSs https://raw.githubusercontent.com/vc-teahouse/Baseband-guard/main/setup.sh -o /tmp/bbg_setup.sh
        bash /tmp/bbg_setup.sh
        
        if grep -q '^config LSM' security/Kconfig; then
          if awk '/^config LSM$/{f=1} f && /default/{print; exit}' security/Kconfig | grep -q 'lockdown'; then
            sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/lockdown/lockdown,baseband_guard/ } }' security/Kconfig
          else
            sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/bpf/bpf,baseband_guard/ } }' security/Kconfig
          fi
        fi
      env:
        CONFIG: ${{ inputs.model }}

    - name: Apply HMBIRD Patch (6.6)
      if: ${{ inputs.kernel_version == '6.6' }}
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform/common"
        
        curl -fL -o hmbird_patch.patch \
          https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/hmbird_patch.patch
        
        grep -q 'hmbird_patch.o' drivers/Makefile || \
          echo 'obj-y += hmbird_patch.o' >> drivers/Makefile
        
        patch -p1 -F 3 < hmbird_patch.patch || true
      env:
        CONFIG: ${{ inputs.model }}

    - name: Configure Kernel
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        
        CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
        
        # Core KernelSU & SUSFS
        cat >> "$CONFIG_FILE" << 'EOF'
        CONFIG_KSU=y
        CONFIG_KPM=y
        CONFIG_KSU_SUSFS=y
        CONFIG_KSU_SUSFS_SUS_PATH=y
        CONFIG_KSU_SUSFS_SUS_MAP=y
        CONFIG_KSU_SUSFS_SUS_MOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y
        CONFIG_KSU_SUSFS_SUS_KSTAT=y
        CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n
        CONFIG_KSU_SUSFS_TRY_UMOUNT=y
        CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y
        CONFIG_KSU_SUSFS_SPOOF_UNAME=y
        CONFIG_KSU_SUSFS_ENABLE_LOG=y
        CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y
        CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y
        CONFIG_KSU_SUSFS_OPEN_REDIRECT=y
        EOF
        
        # Hook configuration
        case "$HOOK" in
          kprobe)
            cat >> "$CONFIG_FILE" << 'EOF'
        CONFIG_KSU_SUSFS_SUS_SU=y
        CONFIG_KPROBES=y
        CONFIG_KSU_KPROBES_HOOK=y
        EOF
            ;;
          manual)
            cat >> "$CONFIG_FILE" << 'EOF'
        CONFIG_KSU_SUSFS_SUS_SU=n
        CONFIG_KSU_MANUAL_HOOK=y
        EOF
            ;;
          tracepoint)
            cat >> "$CONFIG_FILE" << 'EOF'
        CONFIG_KSU_SUSFS_SUS_SU=n
        CONFIG_KSU_TRACEPOINT_HOOK=y
        EOF
            ;;
        esac
        
        # Network & Performance
        cat >> "$CONFIG_FILE" << 'EOF'
        CONFIG_TMPFS_XATTR=y
        CONFIG_TMPFS_POSIX_ACL=y
        CONFIG_TCP_CONG_ADVANCED=y
        CONFIG_TCP_CONG_BBR=y
        CONFIG_NET_SCH_FQ=y
        CONFIG_NET_SCH_FQ_CODEL=y
        CONFIG_IP_ECN=y
        CONFIG_TCP_ECN=y
        CONFIG_IPV6_ECN=y
        CONFIG_IP_NF_TARGET_ECN=y
        CONFIG_IP_NF_TARGET_TTL=y
        CONFIG_IP6_NF_TARGET_HL=y
        CONFIG_IP6_NF_MATCH_HL=y
        CONFIG_LTO_CLANG_THIN=y
        CONFIG_LTO_CLANG=y
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y
        CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=n
        EOF
        
        # LSM (optional)
        [ "$LSM" = "true" ] && echo "CONFIG_BBG=y" >> "$CONFIG_FILE"
      env:
        CONFIG: ${{ inputs.model }}
        HOOK: ${{ inputs.HOOK }}
        LSM: ${{ inputs.LSM }}

    - name: Add sched_ext (6.6)
      if: ${{ inputs.kernel_version == '6.6' }}
      shell: bash
      run: |
        set -euo pipefail
        cd "$CONFIG/kernel_platform"
        
        git clone https://github.com/HanKuCha/sched_ext.git --depth=1
        cp -r sched_ext/* ./common/kernel/sched/
        rm -rf sched_ext/.git
      env:
        CONFIG: ${{ inputs.model }}

    - name: Save Metadata
      id: save_metadata
      shell: bash
      run: |
        mkdir -p "$GITHUB_WORKSPACE/$CONFIG/artifacts"
        
        printf "kernel_version=%s\n" "${TKERNEL_VERSION}" >> "$GITHUB_OUTPUT"
        printf "ksu_version=%s\n" "${KSUVER}" >> "$GITHUB_OUTPUT"
        printf "susfs_version=%s\n" "${SUSVER}" >> "$GITHUB_OUTPUT"
      env:
        CONFIG: ${{ inputs.model }}
        TKERNEL_VERSION: ${{ env.TKERNEL_VERSION }}
        KSUVER: ${{ env.KSUVER }}
        SUSVER: ${{ env.SUSVER }}

    - name: Detect Clang
      shell: bash
      run: |
        set -euo pipefail
        
        KP="$GITHUB_WORKSPACE/$CONFIG/kernel_platform"
        CLANG_FOUND=false
        
        for base in "$KP/prebuilts" "$KP/prebuilts-master"; do
          [ -d "$base/clang/host/linux-x86" ] || continue
          latest=$(ls -d "$base/clang/host/linux-x86/clang-r*/" 2>/dev/null | sort -V | tail -n1 || true)
          if [ -n "$latest" ] && [ -x "$latest/bin/clang" ]; then
            CLANG_BIN="$latest/bin"
            CLANG_FOUND=true
            break
          fi
        done
        
        if ! $CLANG_FOUND && command -v clang >/dev/null 2>&1; then
          CLANG_BIN="$(dirname "$(command -v clang)")"
          CLANG_FOUND=true
        fi
        
        [ "$CLANG_FOUND" = "false" ] && { echo "::error::No clang found"; exit 1; }
        
        echo "CLANG_BIN_PATH=$CLANG_BIN" >> "$GITHUB_ENV"
      env:
        CONFIG: ${{ inputs.model }}

    - name: Build Kernel
      id: build
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Build kernel"
        
        cd "$GITHUB_WORKSPACE/$CONFIG/kernel_platform/common"
        
        : > .scmversion
        sed -i 's/scm_version="$(scm_version --short)"/scm_version=""/' scripts/setlocalversion
        
        export PYTHONWARNINGS="ignore:invalid escape sequence"
        export PATH="${CLANG_BIN_PATH}:$PATH"
        export LLVM=1 LLVM_IAS=1
        export ARCH=arm64 SUBARCH=arm64
        export CROSS_COMPILE=aarch64-linux-android-
        export CROSS_COMPILE_COMPAT=arm-linux-androideabi-
        
        if command -v llvm-ar >/dev/null 2>&1; then
          export AR=llvm-ar NM=llvm-nm OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip
        fi
        
        export LD=ld.lld HOSTLD=ld.lld HOSTCC=clang HOSTCXX=clang++ CC=clang
        
        OUT=out
        mkdir -p "$OUT"
        
        make O="$OUT" gki_defconfig
        
        if [ -n "${CUSTOM_LOCALVERSION}" ]; then
          scripts/config --file "$OUT/.config" --set-str LOCALVERSION "${CUSTOM_LOCALVERSION}"
          scripts/config --file "$OUT/.config" -d LOCALVERSION_AUTO
        fi
        
        if [ "$OPTIMIZE_LEVEL" = "O3" ]; then
          scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE
          scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
          KCFLAGS_EXTRA="-O3"
        else
          KCFLAGS_EXTRA="-O2"
        fi
        
        make O="$OUT" olddefconfig
        
        KCFLAGS="-Wno-error -pipe -fno-stack-protector ${KCFLAGS_EXTRA}"
        
        echo "Starting build with $(nproc) threads..."
        
        if ! make -j$(nproc) O="$OUT" KCFLAGS="$KCFLAGS" 2>&1 | tee build.log; then
          echo "::error::Build failed"
          echo "::group::Build log tail"
          tail -n 100 build.log || true
          echo "::endgroup::"
          exit 1
        fi
        
        IMG="$OUT/arch/arm64/boot/Image"
        if [ ! -f "$IMG" ]; then
          echo "::error::Image not found after build"
          ls -lh "$OUT/arch/arm64/boot/" || true
          exit 1
        fi
        
        IMG_SIZE=$(($(stat -c%s "$IMG" 2>/dev/null || stat -f%z "$IMG") / 1024 / 1024))
        
        if [ "$IMG_SIZE" -lt 10 ]; then
          echo "::error::Image too small: ${IMG_SIZE}MB"
          exit 1
        fi
        
        echo "✅ Build successful: ${IMG_SIZE}MB"
        echo "::endgroup::"
      env:
        CONFIG: ${{ inputs.model }}
        CLANG_BIN_PATH: ${{ env.CLANG_BIN_PATH }}
        CUSTOM_LOCALVERSION: ${{ env.CUSTOM_LOCALVERSION }}
        OPTIMIZE_LEVEL: ${{ inputs.optimize_level }}

    - name: Collect Stats
      id: stats
      shell: bash
      run: |
        set -euo pipefail
        cd "$GITHUB_WORKSPACE/$CONFIG/kernel_platform/common"
        
        IMG="out/arch/arm64/boot/Image"
        if [ ! -f "$IMG" ]; then
          echo "::error::Image not found for stats"
          exit 1
        fi
        
        SHA256=$(sha256sum "$IMG" | awk '{print $1}')
        
        KVER=$(make -s O=out kernelrelease 2>/dev/null || echo "${TKERNEL_VERSION}")
        
        IMG_SIZE=$(($(stat -c%s "$IMG" 2>/dev/null || stat -f%z "$IMG") / 1024 / 1024))
        
        printf "image_sha256=%s\n" "${SHA256}" >> "$GITHUB_OUTPUT"
        printf "kernel_version=%s\n" "${KVER}" >> "$GITHUB_OUTPUT"
        printf "image_size=%s\n" "${IMG_SIZE}" >> "$GITHUB_OUTPUT"
        
        echo "Kernel Stats:"
        echo "  Version: $KVER"
        echo "  Size: ${IMG_SIZE}MB"
        echo "  SHA256: $SHA256"
      env:
        CONFIG: ${{ inputs.model }}
        TKERNEL_VERSION: ${{ env.TKERNEL_VERSION }}

    - name: Download SUSFS Module
      continue-on-error: true
      shell: bash
      run: |
        LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success&per_page=50" | \
          jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)
        
        [ -z "$LATEST_RUN_ID" ] && exit 0
        
        ARTIFACT_URL=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | \
          jq -r '.artifacts[0].archive_download_url // empty')
        
        if [ -n "$ARTIFACT_URL" ]; then
          curl -fsSL -H "Authorization: Bearer $GITHUB_TOKEN" \
            -o ksu_module_susfs_1.5.2+_CI.zip "$ARTIFACT_URL"
          cp ksu_module_susfs_1.5.2+_CI.zip ./AnyKernel3/
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}

    - name: Create Package
      id: package
      shell: bash
      run: |
        set -euo pipefail
        echo "::group::Create package"
        
        WORK_DIR="$GITHUB_WORKSPACE/$MODEL"
        AK3_DIR="$GITHUB_WORKSPACE/AnyKernel3"
        
        image_path=$(find "$WORK_DIR/kernel_platform" -path "*/out/arch/arm64/boot/Image" -type f | head -n1)
        
        if [ -z "$image_path" ] || [ ! -f "$image_path" ]; then
          echo "::error::Image not found in $WORK_DIR/kernel_platform"
          find "$WORK_DIR/kernel_platform" -name "Image" -type f || true
          exit 1
        fi
        
        echo "Found Image: $image_path"
        cp "$image_path" "$AK3_DIR/Image"
        
        PACKAGE_NAME="AnyKernel3_${MODEL}_${KANDROID_VERSION}-${TKERNEL_VERSION}_SukiSU_${KSUVER}"
        ARTIFACT_NAME="kernel-${MODEL}-${BUILD_DATE}"
        
        mkdir -p "$WORK_DIR/artifacts"
        
        cd "$AK3_DIR"
        
        rm -rf .git .github *.md *.txt 2>/dev/null || true
        
        echo "Creating package: ${PACKAGE_NAME}.zip"
        
        FILES="Image anykernel.sh tools/ META-INF/"
        
        if [ -f "ksu_module_susfs_1.5.2+_CI.zip" ]; then
          FILES="$FILES ksu_module_susfs_1.5.2+_CI.zip"
          echo "Including SUSFS module"
        fi
        
        if ! zip -r9 "$WORK_DIR/artifacts/${PACKAGE_NAME}.zip" $FILES \
          -x "*.git/*" -x "*.github/*" 2>&1; then
          echo "::error::Failed to create package"
          exit 1
        fi
        
        PKG_PATH="$WORK_DIR/artifacts/${PACKAGE_NAME}.zip"
        
        if [ ! -f "$PKG_PATH" ]; then
          echo "::error::Package not created: $PKG_PATH"
          ls -lR "$WORK_DIR/artifacts/" || true
          exit 1
        fi
        
        PKG_SIZE=$(($(stat -c%s "$PKG_PATH" 2>/dev/null || stat -f%z "$PKG_PATH") / 1024 / 1024))
        
        echo "✅ Package created: ${PKG_SIZE}MB"
        echo "Package location: $PKG_PATH"
        
        RELATIVE_PATH="${MODEL}/artifacts/${PACKAGE_NAME}.zip"
        
        printf "name=%s\n" "${PACKAGE_NAME}" >> "$GITHUB_OUTPUT"
        printf "artifact_name=%s\n" "${ARTIFACT_NAME}" >> "$GITHUB_OUTPUT"
        printf "size=%s\n" "${PKG_SIZE}" >> "$GITHUB_OUTPUT"
        printf "path=%s\n" "${RELATIVE_PATH}" >> "$GITHUB_OUTPUT"
        printf "filename=%s\n" "${PACKAGE_NAME}.zip" >> "$GITHUB_OUTPUT"
        
        echo "::endgroup::"
      env:
        MODEL: ${{ inputs.model }}
        KANDROID_VERSION: ${{ inputs.android_version }}
        TKERNEL_VERSION: ${{ env.TKERNEL_VERSION }}
        KSUVER: ${{ env.KSUVER }}
        BUILD_DATE: ${{ env.BUILD_DATE }}

    - name: Verify Package
      shell: bash
      run: |
        set -euo pipefail
        
        PKG_PATH="$GITHUB_WORKSPACE/$MODEL/artifacts/${PACKAGE_NAME}.zip"
        
        if [ ! -f "$PKG_PATH" ]; then
          echo "::error::Package verification failed!"
          echo "Expected: $PKG_PATH"
          echo ""
          echo "Directory contents:"
          ls -lR "$GITHUB_WORKSPACE/$MODEL/artifacts/" || echo "artifacts/ directory missing"
          exit 1
        fi
        
        if ! unzip -t "$PKG_PATH" >/dev/null 2>&1; then
          echo "::error::Package is corrupted!"
          exit 1
        fi
        
        if ! unzip -l "$PKG_PATH" | grep -q "Image"; then
          echo "::error::Package missing kernel Image!"
          unzip -l "$PKG_PATH"
          exit 1
        fi
        
        echo "✅ Package verified successfully"
      env:
        MODEL: ${{ inputs.model }}
        PACKAGE_NAME: ${{ steps.package.outputs.name }}

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.package.outputs.artifact_name }}
        path: ${{ steps.package.outputs.path }}
        compression-level: 0
        if-no-files-found: error
        retention-days: 30

    - name: Summary
      if: always()
      shell: bash
      run: |
        if [ "${{ steps.build.outcome }}" = "success" ]; then
          echo "✅ **${{ inputs.model }}** - Build Success" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "- Kernel: \`${{ steps.stats.outputs.kernel_version }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- KSU: \`${{ env.KSUVER }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Package: \`${{ steps.package.outputs.name }}.zip\` (\`${{ steps.package.outputs.size }}MB\`)" >> "$GITHUB_STEP_SUMMARY"
          echo "- Artifact: \`${{ steps.package.outputs.artifact_name }}\`" >> "$GITHUB_STEP_SUMMARY"
        else
          echo "❌ **${{ inputs.model }}** - Build Failed" >> "$GITHUB_STEP_SUMMARY"
        fi
