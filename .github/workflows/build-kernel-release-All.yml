name: Build OnePlus Kernels_All

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      make_release:
        description: 'Create release?'
        type: boolean
        default: false
      optimize_level:
        description: 'Compiler optimization'
        type: choice
        options: [O2, O3]
        default: O2
      KSU_META:
        description: 'SukiSU Ultra metadata'
        default: 'susfs-main/⚡Ultra⚡/'
      HOOK:
        description: 'Hook type'
        type: choice
        options: [kprobe, manual, tracepoint]
        default: manual
      LSM:
        description: 'Enable Baseband Guard?'
        type: boolean
        default: false
      susfs_branch:
        description: 'SUSFS branch (auto if empty)'
        default: ''

env:
  BUILD_DATE: ${{ github.run_number }}
  CCACHE_DIR: ${{ github.workspace }}/.ccache

jobs:
  build:
    name: ${{ matrix.config }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      fail-fast: false
      max-parallel: 20
      matrix:
        config:
          - oneplus_nord_4_v
          - oneplus_ace_3v_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2_pro_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_13r
          - oneplus_nord_5
          - oneplus_ace5_pro
          - oneplus_13_CN
          - oneplus_13_global
          - oneplus_13t
          - oneplus_13s
          - oneplus_pad_3

    steps:
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          swap-size-mb: 1024
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Checkout
        uses: actions/checkout@v4

      - name: Load Device Config
        id: config
        run: |
          CONFIG_FILE="configs/${{ matrix.config }}.json"
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "::error::Config not found: $CONFIG_FILE"
            exit 1
          fi
          
          MODEL=$(jq -r '.model' "$CONFIG_FILE")
          SOC=$(jq -r '.soc' "$CONFIG_FILE")
          BRANCH=$(jq -r '.branch' "$CONFIG_FILE")
          MANIFEST=$(jq -r '.manifest' "$CONFIG_FILE")
          ANDROID_VERSION=$(jq -r '.android_version' "$CONFIG_FILE")
          KERNEL_VERSION=$(jq -r '.kernel_version' "$CONFIG_FILE")
          
          echo "model=$MODEL" >> "$GITHUB_OUTPUT"
          echo "soc=$SOC" >> "$GITHUB_OUTPUT"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          echo "manifest=$MANIFEST" >> "$GITHUB_OUTPUT"
          echo "android_version=$ANDROID_VERSION" >> "$GITHUB_OUTPUT"
          echo "kernel_version=$KERNEL_VERSION" >> "$GITHUB_OUTPUT"

      - name: Build Kernel
        id: build
        uses: ./.github/actions/build-kernel
        with:
          model: ${{ steps.config.outputs.model }}
          soc: ${{ steps.config.outputs.soc }}
          branch: ${{ steps.config.outputs.branch }}
          manifest: ${{ steps.config.outputs.manifest }}
          android_version: ${{ steps.config.outputs.android_version }}
          kernel_version: ${{ steps.config.outputs.kernel_version }}
          ksun_branch: 'stable'
          susfs_branch: ${{ github.event.inputs.susfs_branch }}
          KSU_META: ${{ github.event.inputs.KSU_META }}
          HOOK: ${{ github.event.inputs.HOOK }}
          LSM: ${{ github.event.inputs.LSM }}
          optimize_level: ${{ github.event.inputs.optimize_level }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Summary
        if: always()
        run: |
          if [ "${{ steps.build.outcome }}" = "success" ]; then
            echo "✅ **${{ matrix.config }}** built successfully" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- **Kernel:** ${{ steps.build.outputs.kernel_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **KSU:** ${{ steps.build.outputs.ksu_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **SUSFS:** ${{ steps.build.outputs.susfs_version }}" >> $GITHUB_STEP_SUMMARY
            echo "- **Package:** ${{ steps.build.outputs.filename }} (${{ steps.build.outputs.package_size }}MB)" >> $GITHUB_STEP_SUMMARY
            echo "- **Artifact:** ${{ steps.build.outputs.artifact_name }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **${{ matrix.config }}** build failed" >> $GITHUB_STEP_SUMMARY
          fi

  create-release:
    needs: [build]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.make_release == 'true' && success() }}
    permissions:
      contents: write
    
    steps:
      - name: Download All Kernel Packages
        uses: actions/download-artifact@v4
        with:
          path: downloaded-artifacts
          pattern: kernel-*
          merge-multiple: false

      - name: Download Version Info
        uses: actions/download-artifact@v4
        with:
          path: version-info
          pattern: version-*
          merge-multiple: true

      - name: Generate Release Notes
        shell: bash
        run: |
          cat > release_notes.md << 'EOF'
          # 🚀 OnePlus Kernels with KernelSU
          
          ## 📱 Available Builds
          
          | Device | Kernel Version | Android | SoC |
          |--------|----------------|---------|-----|
          EOF
          
          # Process version info files
          for file in $(find version-info -name "*.txt" -type f 2>/dev/null | sort); do
            if [ -f "$file" ]; then
              model=$(basename "$file" .txt)
              version=$(cat "$file" | head -n1)
              
              # Default values
              android_ver="14"
              soc="SM8550"
              
              # Determine Android version and SoC based on model
              case "$model" in
                oneplus_13_*|oneplus_ace5_pro|oneplus_13t|oneplus_13s|oneplus_pad_3)
                  android_ver="15"
                  soc="SM8750"
                  ;;
                oneplus12_*|oneplus_13r|oneplus_ace5|oneplus_nord_5|oneplus_ace3_pro_v)
                  android_ver="14"
                  soc="SM8650"
                  ;;
                oneplus_11_*|oneplus_12r_*|oneplus_ace2_pro_*|oneplus_open_*)
                  android_ver="13-14"
                  soc="SM8550"
                  ;;
                oneplus_11r_*|oneplus_ace2_*|oneplus_nord_4_*|oneplus_ace_3v_*)
                  android_ver="12-13"
                  soc="SM7675/SM8475"
                  ;;
              esac
              
              printf "| %s | %s | %s | %s |\n" "$model" "$version" "$android_ver" "$soc" >> release_notes.md
            fi
          done
          
          cat << 'EOF' >> release_notes.md
          
          ## ✨ What's Included
          
          - ✅ **KernelSU** integrated (version 11200+)
          - 🛡️ **SUSFS 1.5.12** for root detection bypass
          - 🔒 **WireGuard** VPN support
          - 🚄 **BBR** TCP congestion control
          - ⚡ Optimized with **${{ github.event.inputs.optimize_level }}**
          - 🎯 **Hook Type:** ${{ github.event.inputs.HOOK }}
          EOF
          
          if [ "${{ github.event.inputs.LSM }}" = "true" ]; then
            echo "- 🔐 **Baseband Guard LSM** enabled" >> release_notes.md
          fi
          
          cat << 'EOF' >> release_notes.md
          
          ## 📦 Installation
          
          1. Download the zip file for your device
          2. Flash the zip with SukiManager (enable KPM also if you want it)
          4. Reboot
          
          ## ⚠️ Important Notes
          
          - ⚡ Make sure to **backup your data** before flashing
          - 📱 Verify your device model matches the filename
          - 🔍 Check Android version compatibility
          - 📲 SukiSU Manager is required for root access      
          
          ## 🔗 Links
          
          - **KernelSU Manager:** https://github.com/tiann/KernelSU
          - **Report Issues:** https://github.com/${{ github.repository }}/issues
          - **SUSFS Module:** https://github.com/sidex15/ksu_module_susfs
          
          ---
          
          **Build:** `${{ github.run_number }}` | **Date:** `$(date -u +"%Y-%m-%d %H:%M UTC")`
          EOF
          
          echo "Release notes generated successfully"
          cat release_notes.md

      - name: List Downloaded Artifacts
        run: |
          echo "Downloaded artifacts:"
          find downloaded-artifacts -type f -name "*.zip" | while read file; do
            echo "  - $(basename "$file") ($(du -h "$file" | cut -f1))"
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: build-${{ github.run_number }}
          name: OnePlus Kernels - Build ${{ github.run_number }}
          body_path: release_notes.md
          files: downloaded-artifacts/kernel-*/*.zip
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        if: success()
        run: |
          echo "## 🎉 Release Created Successfully" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** build-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**URL:** https://github.com/${{ github.repository }}/releases/tag/build-${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Included Kernels" >> $GITHUB_STEP_SUMMARY
          
          count=$(find downloaded-artifacts -name "*.zip" -type f | wc -l)
          echo "Total packages: **$count**" >> $GITHUB_STEP_SUMMARY
