name: Build OnePlus Kernel - Single Device

concurrency:
  group: build-${{ github.ref }}-${{ inputs.device }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      device:
        description: 'Select device to build'
        type: choice
        required: true
        options:
          - oneplus_nord_4_v
          - oneplus_ace_3v_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2_pro_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_13r
          - oneplus_nord_5
          - oneplus_ace5_pro
          - oneplus_13_CN
          - oneplus_13_global
          - oneplus_13t
          - oneplus_13s
          - oneplus_pad_3
        default: oneplus_13_CN
      make_release:
        description: 'Create GitHub release after build?'
        type: boolean
        default: false
      optimize_level:
        description: 'Compiler optimization level'
        type: choice
        options: [O2, O3]
        default: O2
      KSU_META:
        description: 'SukiSU Ultra metadata (branch/tag/hash)'
        default: 'susfs-main/⚡Ultra⚡/'
      HOOK:
        description: 'Hook type'
        type: choice
        options: [kprobe, manual, tracepoint]
        default: manual
      LSM:
        description: 'Enable Baseband Guard LSM?'
        type: boolean
        default: false
      susfs_branch:
        description: 'SUSFS branch (leave empty for auto-detect)'
        default: ''

jobs:
  build:
    name: Build ${{ inputs.device }}
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          swap-size-mb: 4096
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'
          remove-docker-images: 'true'

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -yqq jq

      - name: Load Device Configuration
        id: config
        run: |
          set -euo pipefail
          
          CONFIG_FILE="configs/${{ inputs.device }}.json"
          
          echo "::group::Loading configuration for ${{ inputs.device }}"
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "::error::Configuration file not found: $CONFIG_FILE"
            echo "Available configurations:"
            ls -1 configs/*.json 2>/dev/null || echo "No configs found"
            exit 1
          fi
          
          # Validate JSON
          if ! jq empty "$CONFIG_FILE" 2>/dev/null; then
            echo "::error::Invalid JSON in $CONFIG_FILE"
            cat "$CONFIG_FILE"
            exit 1
          fi
          
          # Extract and validate fields
          MODEL=$(jq -r '.model // empty' "$CONFIG_FILE")
          SOC=$(jq -r '.soc // empty' "$CONFIG_FILE")
          BRANCH=$(jq -r '.branch // empty' "$CONFIG_FILE")
          MANIFEST=$(jq -r '.manifest // empty' "$CONFIG_FILE")
          ANDROID_VERSION=$(jq -r '.android_version // empty' "$CONFIG_FILE")
          KERNEL_VERSION=$(jq -r '.kernel_version // empty' "$CONFIG_FILE")
          
          # Validate required fields
          for var in MODEL SOC BRANCH MANIFEST ANDROID_VERSION KERNEL_VERSION; do
            val="${!var}"
            if [ -z "$val" ]; then
              echo "::error::Missing required field: $var in $CONFIG_FILE"
              jq '.' "$CONFIG_FILE"
              exit 1
            fi
          done
          
          # Output values
          echo "model=$MODEL" >> "$GITHUB_OUTPUT"
          echo "soc=$SOC" >> "$GITHUB_OUTPUT"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          echo "manifest=$MANIFEST" >> "$GITHUB_OUTPUT"
          echo "android_version=$ANDROID_VERSION" >> "$GITHUB_OUTPUT"
          echo "kernel_version=$KERNEL_VERSION" >> "$GITHUB_OUTPUT"
          
          echo "✅ Configuration loaded successfully:"
          echo "  Model: $MODEL"
          echo "  SoC: $SOC"
          echo "  Branch: $BRANCH"
          echo "  Manifest: $MANIFEST"
          echo "  Android: $ANDROID_VERSION"
          echo "  Kernel: $KERNEL_VERSION"
          
          echo "::endgroup::"

      - name: Build Kernel
        id: build
        uses: ./.github/actions/build-kernel
        with:
          model: ${{ steps.config.outputs.model }}
          soc: ${{ steps.config.outputs.soc }}
          branch: ${{ steps.config.outputs.branch }}
          manifest: ${{ steps.config.outputs.manifest }}
          android_version: ${{ steps.config.outputs.android_version }}
          kernel_version: ${{ steps.config.outputs.kernel_version }}
          ksun_branch: 'stable'
          susfs_branch: ${{ inputs.susfs_branch }}
          KSU_META: ${{ inputs.KSU_META }}
          HOOK: ${{ inputs.HOOK }}
          LSM: ${{ inputs.LSM }}
          optimize_level: ${{ inputs.optimize_level }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Summary
        if: success()
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << EOF
          # ✅ Build Successful - ${{ inputs.device }}
          
          ## 📦 Package Information
          
          | Property | Value |
          |----------|-------|
          | **Device** | \`${{ inputs.device }}\` |
          | **Package** | \`${{ steps.build.outputs.filename }}\` |
          | **Kernel Version** | \`${{ steps.build.outputs.kernel_version }}\` |
          | **KernelSU** | \`${{ steps.build.outputs.ksu_version }}\` |
          | **SUSFS** | \`${{ steps.build.outputs.susfs_version }}\` |
          | **Size** | \`${{ steps.build.outputs.package_size }}MB\` |
          | **SHA256** | \`${{ steps.build.outputs.image_sha256 }}\` |
          | **Artifact** | \`${{ steps.build.outputs.artifact_name }}\` |
          
          ## ⚙️ Build Configuration
          
          | Option | Value |
          |--------|-------|
          | Hook Type | \`${{ inputs.HOOK }}\` |
          | Optimization | \`${{ inputs.optimize_level }}\` |
          | Baseband Guard | \`${{ inputs.LSM }}\` |
          | SUSFS Branch | \`${{ inputs.susfs_branch || 'auto-detected' }}\` |
          
          ## 📥 Download
          
          The kernel package has been uploaded as an artifact:
          - **Name:** \`${{ steps.build.outputs.artifact_name }}\`
          - **Path:** \`${{ steps.build.outputs.path }}\`
          
          EOF

      - name: Upload Build Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ inputs.device }}
          path: |
            ${{ steps.config.outputs.model }}/kernel_platform/common/build.log
            ${{ steps.config.outputs.model }}/kernel_platform/common/out/.config
            ${{ steps.config.outputs.model }}/kernel_platform/common/**/*.rej
          if-no-files-found: ignore
          retention-days: 7

  release:
    name: Create Release
    needs: build
    if: ${{ inputs.make_release == true && needs.build.result == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          pattern: kernel-*
          path: artifacts
          merge-multiple: false

      - name: Extract Package
        id: extract
        run: |
          set -euo pipefail
          
          echo "::group::Extracting package"
          
          mkdir -p release
          
          # Find the kernel package
          ZIP_PATH=$(find artifacts -type f -name "AnyKernel3_*.zip" | head -n1)
          
          if [ -z "$ZIP_PATH" ]; then
            echo "::error::No kernel package found in artifacts"
            echo "::group::Artifacts structure"
            find artifacts -type f
            echo "::endgroup::"
            exit 1
          fi
          
          echo "Found package: $ZIP_PATH"
          
          # Copy to release directory
          cp "$ZIP_PATH" release/
          
          cd release
          ZIP_FILE=$(basename "$ZIP_PATH")
          
          # Verify file exists
          if [ ! -f "$ZIP_FILE" ]; then
            echo "::error::Failed to copy package"
            ls -la
            exit 1
          fi
          
          # Output for next steps
          echo "zip_file=$ZIP_FILE" >> "$GITHUB_OUTPUT"
          echo "zip_path=release/$ZIP_FILE" >> "$GITHUB_OUTPUT"
          
          echo "✅ Package extracted: $ZIP_FILE"
          ls -lh "$ZIP_FILE"
          
          echo "::endgroup::"

      - name: Verify Package Integrity
        id: verify
        run: |
          set -euo pipefail
          
          cd release
          
          ZIP="${{ steps.extract.outputs.zip_file }}"
          
          echo "::group::Verifying package integrity"
          
          if [ ! -f "$ZIP" ]; then
            echo "::error::Package not found: $ZIP"
            ls -la
            exit 1
          fi
          
          # Test ZIP integrity
          if ! unzip -t "$ZIP" >/dev/null 2>&1; then
            echo "::error::Package is corrupted"
            exit 1
          fi
          
          # Verify kernel Image exists
          if ! unzip -l "$ZIP" | grep -q "Image"; then
            echo "::error::Kernel Image not found in package"
            echo "Package contents:"
            unzip -l "$ZIP"
            exit 1
          fi
          
          # Calculate statistics
          SIZE=$(($(stat -c%s "$ZIP" 2>/dev/null || stat -f%z "$ZIP") / 1024 / 1024))
          SHA256=$(sha256sum "$ZIP" | cut -d' ' -f1)
          
          # Create checksum file
          echo "$SHA256  $ZIP" > SHA256SUMS.txt
          
          # Output for next steps
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          echo "size=$SIZE" >> "$GITHUB_OUTPUT"
          echo "sha256=$SHA256" >> "$GITHUB_OUTPUT"
          
          echo "✅ Package verified successfully"
          echo "  Filename: $ZIP"
          echo "  Size: ${SIZE}MB"
          echo "  SHA256: $SHA256"
          
          echo "::endgroup::"

      - name: Generate Release Tag
        id: tag
        run: |
          # Get version from file or use default
          VERSION=$(cat .github/VERSION 2>/dev/null || echo "1.5.12")
          
          # Generate timestamp
          TIMESTAMP=$(date +%Y%m%d-%H%M)
          
          # Create tag
          TAG="v${VERSION}-${{ inputs.device }}-${TIMESTAMP}"
          
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "timestamp=$TIMESTAMP" >> "$GITHUB_OUTPUT"
          
          echo "Generated release tag: $TAG"

      - name: Generate Release Notes
        run: |
          cd release
          
          cat > RELEASE_NOTES.md << 'EOFNOTES'
          # 🚀 ${{ inputs.device }} Kernel Build
          
          ## 📦 Package Information
          
          | Property | Value |
          |----------|-------|
          | **Filename** | `${{ steps.verify.outputs.zip }}` |
          | **Size** | ${{ steps.verify.outputs.size }} MB |
          | **SHA256** | `${{ steps.verify.outputs.sha256 }}` |
          | **Device** | `${{ inputs.device }}` |
          
          ## 📥 Installation Instructions
          
          ### Method 1: KernelSU Manager (Recommended)
          
          1. Download the AnyKernel3 zip file
          2. Open KernelSU Manager
          3. Go to "Install" tab
          4. Select the downloaded zip
          5. Flash and reboot
          
          ### Method 2: Custom Recovery
          
          1. Download the AnyKernel3 zip file
          2. Boot into TWRP/OrangeFox
          3. Select "Install" and choose the zip
          4. Swipe to flash
          5. Reboot system
          
          ### Method 3: Kernel Flasher
          
          1. Download the AnyKernel3 zip file
          2. Open Kernel Flasher app
          3. Select the zip file
          4. Flash and reboot
          
          ## ⚙️ Build Configuration
          
          | Option | Value |
          |--------|-------|
          | **Hook Type** | `${{ inputs.HOOK }}` |
          | **Optimization** | `${{ inputs.optimize_level }}` |
          | **Baseband Guard LSM** | `${{ inputs.LSM }}` |
          | **SUSFS Branch** | `${{ inputs.susfs_branch || 'auto-detected' }}` |
          | **KSU Metadata** | `${{ inputs.KSU_META }}` |
          
          ## 🔐 Package Verification
          
          Verify the package integrity using SHA256:
          
          ```bash
          # Download SHA256SUMS.txt
          wget https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/SHA256SUMS.txt
          
          # Verify
          sha256sum -c SHA256SUMS.txt
          ```
          
          Expected output:
          ```
          ${{ steps.verify.outputs.zip }}: OK
          ```
          
          ## ✨ Features
          
          - ✅ **SukiSU Ultra** integrated (KernelSU fork)
          - 🛡️ **SUSFS 1.5.12** for advanced root hiding
          - 🔒 **WireGuard** VPN support
          - 🚄 **BBR** TCP congestion control
          - ⚡ Optimized with **${{ inputs.optimize_level }}**
          - 🎯 **${{ inputs.HOOK }}** hook type
          EOFNOTES
          
          if [ "${{ inputs.LSM }}" = "true" ]; then
            echo "- 🔐 **Baseband Guard LSM** enabled" >> RELEASE_NOTES.md
          fi
          
          cat << 'EOFNOTES' >> RELEASE_NOTES.md
          
          ## ⚠️ Important Notes
          
          - ⚡ **Backup your data** before flashing any custom kernel
          - 📱 Verify your device model matches: **${{ inputs.device }}**
          - 🔍 Check that you have the correct recovery or flasher installed
          - 📲 SukiSU Manager is **required** for root management
          - 🛡️ SUSFS module can be installed separately for enhanced hiding
          - 🔄 If you encounter issues, try clean flashing or reflashing stock kernel first
          
          ## 🔗 Useful Links
          
          - **SukiSU Ultra:** https://github.com/SukiSU-Ultra/SukiSU-Ultra
          - **SukiSU Manager:** https://github.com/SukiSU-Ultra/SukiSU-Ultra/releases
          - **SUSFS Module:** https://github.com/sidex15/ksu_module_susfs
          - **Report Issues:** https://github.com/${{ github.repository }}/issues
          - **Source Code:** https://github.com/${{ github.repository }}
          
          ## 📊 Build Information
          
          - **Build Date:** `$(date -u +"%Y-%m-%d %H:%M UTC")`
          - **Workflow:** `${{ github.workflow }}`
          - **Run Number:** `#${{ github.run_number }}`
          - **Commit:** `${{ github.sha }}`
          
          ---
          
          **⚠️ Disclaimer:** This is a custom kernel. Use at your own risk. Always backup your data before flashing.
          EOFNOTES
          
          echo "::group::Release Notes"
          cat RELEASE_NOTES.md
          echo "::endgroup::"

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          
          cd release
          
          TAG="${{ steps.tag.outputs.tag }}"
          TITLE="🚀 ${{ inputs.device }} - ${{ steps.tag.outputs.version }} (Build #${{ github.run_number }})"
          
          echo "::group::Creating release"
          
          # Configure git
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create and push tag
          echo "Creating tag: $TAG"
          git tag -a "$TAG" -m "$TITLE"
          git push origin "$TAG"
          
          # Create release
          echo "Creating release..."
          gh release create "$TAG" \
            --title "$TITLE" \
            --notes-file RELEASE_NOTES.md \
            --latest=false \
            "${{ steps.verify.outputs.zip }}" \
            SHA256SUMS.txt
          
          echo "✅ Release created successfully!"
          echo "  Tag: $TAG"
          echo "  Package: ${{ steps.verify.outputs.zip }}"
          echo "  URL: https://github.com/${{ github.repository }}/releases/tag/$TAG"
          
          echo "::endgroup::"

      - name: Cleanup Old Releases
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::group::Cleaning up old releases"
          
          DEVICE_PATTERN="${{ inputs.device }}"
          KEEP_COUNT=5
          
          # Get all releases for this device, sorted by date
          OLD_RELEASES=$(gh release list --limit 100 --json tagName,createdAt \
            --jq "[.[] | select(.tagName | contains(\"$DEVICE_PATTERN\"))] | sort_by(.createdAt) | reverse | .[${KEEP_COUNT}:] | .[].tagName")
          
          if [ -z "$OLD_RELEASES" ]; then
            echo "ℹ️ No old releases to clean up (keeping last $KEEP_COUNT)"
          else
            echo "🗑️ Deleting old releases (keeping last $KEEP_COUNT):"
            echo "$OLD_RELEASES" | while read -r tag; do
              if [ -n "$tag" ]; then
                echo "  Deleting: $tag"
                gh release delete "$tag" --yes --cleanup-tag 2>/dev/null || \
                  echo "    ⚠️ Failed to delete $tag (may already be deleted)"
              fi
            done
            echo "✅ Cleanup completed"
          fi
          
          echo "::endgroup::"

      - name: Release Summary
        if: success()
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << EOF
          # 🎉 Release Created Successfully!
          
          ## 📦 Release Information
          
          **Tag:** [\`${{ steps.tag.outputs.tag }}\`](https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag }})
          
          ### Package Details
          
          | Property | Value |
          |----------|-------|
          | **Device** | \`${{ inputs.device }}\` |
          | **Filename** | \`${{ steps.verify.outputs.zip }}\` |
          | **Size** | ${{ steps.verify.outputs.size }} MB |
          | **SHA256** | \`${{ steps.verify.outputs.sha256 }}\` |
          | **Version** | \`${{ steps.tag.outputs.version }}\` |
          
          ### 🔗 Quick Links
          
          - [📥 Download Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag }})
          - [🔐 Download Checksum](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/SHA256SUMS.txt)
          - [📖 View Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag }})
          
          ### ⚙️ Build Configuration
          
          | Option | Value |
          |--------|-------|
          | **Hook Type** | \`${{ inputs.HOOK }}\` |
          | **Optimization** | \`${{ inputs.optimize_level }}\` |
          | **Baseband Guard** | \`${{ inputs.LSM }}\` |
          | **SUSFS Branch** | \`${{ inputs.susfs_branch || 'auto-detected' }}\` |
          
          ### 📊 Build Statistics
          
          - **Workflow Run:** [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Commit:** [\`${GITHUB_SHA:0:7}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          - **Build Time:** $(date -u +"%Y-%m-%d %H:%M UTC")
          - **Release Tag:** \`${{ steps.tag.outputs.tag }}\`
          
          ### 📥 Installation
          
          1. Download the zip file from the release
          2. Flash via KernelSU Manager or Recovery
          3. Reboot and enjoy!
          
          ### 🔐 Verification
          
          \`\`\`bash
          sha256sum -c SHA256SUMS.txt
          \`\`\`
          
          ---
          
          ✅ **Status:** Release published successfully  
          🔗 **URL:** https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag }}
          EOF

      - name: Failure Summary
        if: failure()
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << EOF
          # ❌ Release Creation Failed
          
          The release creation process failed for **${{ inputs.device }}**.
          
          ## 🔍 Troubleshooting Steps
          
          1. **Check Workflow Logs:** [View logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          2. **Verify Build Artifacts:** Ensure the kernel package was uploaded correctly
          3. **Check Permissions:** Verify GitHub token has \`contents: write\` permission
          4. **Review Tag:** Ensure tag doesn't already exist: \`${{ steps.tag.outputs.tag }}\`
          
          ## 📋 Debug Information
          
          | Property | Value |
          |----------|-------|
          | **Device** | ${{ inputs.device }} |
          | **Tag** | ${{ steps.tag.outputs.tag }} |
          | **Workflow** | ${{ github.workflow }} |          
          | **Commit** | ${{ github.sha }} |
          
          ## 🔄 Next Steps
          
          - Review the error logs above
          - Fix any issues
          - Re-run the workflow
          
          If the problem persists, please [open an issue](https://github.com/${{ github.repository }}/issues).
          EOF
