name: Build OnePlus Kernel

concurrency:
  group: build-${{ github.ref }}-${{ inputs.device }}
  cancel-in-progress: true

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      device:
        description: 'Device'
        type: choice
        required: true
        options:
          - oneplus_nord_4_v
          - oneplus_ace_3v_v
          - oneplus_11r_v
          - oneplus_ace2_v
          - oneplus_11_v
          - oneplus_12r_v
          - oneplus_ace2_pro_v
          - oneplus_open_v
          - oneplus12_v
          - oneplus_ace3_pro_v
          - oneplus_ace5
          - oneplus_13r
          - oneplus_nord_5
          - oneplus_ace5_pro
          - oneplus_13_CN
          - oneplus_13_global
          - oneplus_13t
          - oneplus_13s
          - oneplus_pad_3
        default: oneplus_13_CN
      make_release:
        description: 'Create release?'
        type: boolean
        default: false
      optimize_level:
        description: 'Optimization'
        type: choice
        options: [O2, O3]
        default: O2
      KSU_META:
        description: 'SukiSU Ultra metadata'
        default: 'susfs-main/⚡Ultra⚡/'
      HOOK:
        description: 'Hook type'
        type: choice
        options: [kprobe, manual, tracepoint]
        default: manual
      LSM:
        description: 'Enable Baseband Guard?'
        type: boolean
        default: false
      susfs_branch:
        description: 'SUSFS branch (auto if empty)'
        default: ''

jobs:
  build:
    name: Build ${{ inputs.device }}
    runs-on: ubuntu-latest
    timeout-minutes: 120

    steps:
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          swap-size-mb: 4096
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          remove-docker-images: true

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Environment
        run: |
          sudo apt-get update -qq
          sudo apt-get install -yqq jq

      - name: Load Device Config
        id: config
        run: |
          CONFIG_FILE=".github/device_map.json"
          DEVICE="${{ inputs.device }}"
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "::error::Config file not found"
            exit 1
          fi
          
          if ! jq -e --arg k "$DEVICE" 'has($k)' "$CONFIG_FILE" >/dev/null; then
            echo "::error::Device '$DEVICE' not found"
            jq -r 'keys[]' "$CONFIG_FILE"
            exit 1
          fi
          
          jq -r --arg k "$DEVICE" '.[$k] | to_entries[] | "\(.key)=\(.value)"' \
            "$CONFIG_FILE" | tee -a "$GITHUB_OUTPUT"

      - name: Build Kernel
        id: build
        uses: ./.github/actions/build-kernel
        with:
          model: ${{ steps.config.outputs.model }}
          soc: ${{ steps.config.outputs.soc }}
          branch: ${{ steps.config.outputs.branch }}
          manifest: ${{ steps.config.outputs.manifest }}
          android_version: ${{ steps.config.outputs.android_version }}
          kernel_version: ${{ steps.config.outputs.kernel_version }}
          susfs_branch: ${{ inputs.susfs_branch }}
          KSU_META: ${{ inputs.KSU_META }}
          HOOK: ${{ inputs.HOOK }}
          LSM: ${{ inputs.LSM }}
          optimize_level: ${{ inputs.optimize_level }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Summary
        if: success()
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << EOF
          ## ✅ Build Success
          
          - **Device:** \`${{ inputs.device }}\`
          - **Package:** \`${{ steps.build.outputs.package_name }}.zip\`
          - **Kernel:** \`${{ steps.build.outputs.kernel_version }}\`
          - **KSU:** \`${{ steps.build.outputs.ksu_version }}\`
          - **Size:** \`${{ steps.build.outputs.package_size }}MB\`
          - **Artifact:** \`${{ steps.build.outputs.artifact_name }}\`
          EOF

      - name: Upload Logs on Failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: logs-${{ inputs.device }}
          path: |
            ${{ steps.config.outputs.model }}/kernel_platform/common/build.log
            ${{ steps.config.outputs.model }}/kernel_platform/common/out/.config
          if-no-files-found: ignore
          retention-days: 7

  release:
    needs: build
    if: inputs.make_release && needs.build.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          pattern: kernel-*
          path: artifacts
          merge-multiple: false

      - name: Extract Package
        id: extract
        run: |
          set -euo pipefail
          
          echo "::group::Extracting package"
          
          mkdir -p release
          
          # Find the ZIP file (it's in a subdirectory named kernel-{model}-{date})
          ZIP_PATH=$(find artifacts -type f -name "*.zip" | head -n1)
          
          if [ -z "$ZIP_PATH" ]; then
            echo "::error::No package found in artifacts"
            echo "::group::Artifacts structure"
            ls -lR artifacts/
            echo "::endgroup::"
            exit 1
          fi
          
          echo "Found package: $ZIP_PATH"
          cp "$ZIP_PATH" release/
          
          cd release
          ZIP_FILE=$(basename "$ZIP_PATH")
          
          # Output for next steps
          echo "zip_file=$ZIP_FILE" >> "$GITHUB_OUTPUT"
          echo "zip_path=release/$ZIP_FILE" >> "$GITHUB_OUTPUT"
          
          echo "✅ Extracted: $ZIP_FILE"
          ls -lh "$ZIP_FILE"
          
          echo "::endgroup::"

      - name: Verify Package
        id: verify
        run: |
          cd release
          
          ZIP="${{ steps.extract.outputs.zip_file }}"
          
          if [ ! -f "$ZIP" ]; then
            echo "::error::Package not found: $ZIP"
            ls -la
            exit 1
          fi
          
          echo "::group::Verifying package"
          
          # Test ZIP integrity
          if ! unzip -t "$ZIP" >/dev/null 2>&1; then
            echo "::error::Corrupted package"
            exit 1
          fi
          
          # Verify kernel Image exists
          if ! unzip -l "$ZIP" | grep -q "Image"; then
            echo "::error::Missing kernel Image"
            unzip -l "$ZIP"
            exit 1
          fi
          
          # Calculate stats
          SIZE=$(($(stat -c%s "$ZIP" 2>/dev/null || stat -f%z "$ZIP") / 1024 / 1024))
          SHA256=$(sha256sum "$ZIP" | cut -d' ' -f1)
          
          # Create checksum file
          echo "$SHA256  $ZIP" > SHA256SUMS.txt
          
          # Output for next steps
          echo "zip=$ZIP" >> "$GITHUB_OUTPUT"
          echo "size=$SIZE" >> "$GITHUB_OUTPUT"
          echo "sha256=$SHA256" >> "$GITHUB_OUTPUT"
          
          echo "✅ Package verified"
          echo "  Size: ${SIZE}MB"
          echo "  SHA256: $SHA256"
          
          echo "::endgroup::"

      - name: Generate Tag
        id: tag
        run: |
          VERSION=$(cat .github/VERSION 2>/dev/null || echo "1.5.12")
          TIMESTAMP=$(date +%Y%m%d-%H%M)
          TAG="v${VERSION}-${{ inputs.device }}-${TIMESTAMP}"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "Generated tag: $TAG"

      - name: Create Release Notes
        run: |
          cd release
          
          cat > NOTES.md << 'EOF'
          # 🚀 ${{ inputs.device }} Kernel Build
          
          ## 📦 Package Information
          
          - **Filename:** `${{ steps.verify.outputs.zip }}`
          - **Size:** ${{ steps.verify.outputs.size }} MB
          - **SHA256:** `${{ steps.verify.outputs.sha256 }}`
          
          ## 📥 Installation
          
          1. Download the AnyKernel3 zip file
          2. Flash via:
             - **KernelSU Manager** (recommended)
             - **Kernel Flasher**
             - **TWRP/OrangeFox Recovery**
          3. Reboot and enjoy!
          
          ## ⚙️ Build Configuration
          
          | Option | Value |
          |--------|-------|
          | Hook Type | `${{ inputs.HOOK }}` |
          | Optimization | `${{ inputs.optimize_level }}` |
          | Baseband Guard LSM | `${{ inputs.LSM }}` |
          | SUSFS Branch | `${{ inputs.susfs_branch || 'auto-detected' }}` |
          | KSU Metadata | `${{ inputs.KSU_META }}` |
          
          ## 🔐 Verification
          
          Verify package integrity:
          ```bash
          sha256sum -c SHA256SUMS.txt
          ```
          
          Expected output:
          ```
          ${{ steps.verify.outputs.zip }}: OK
          ```
          
          ## ⚠️ Important Notes
          
          - ✅ Make sure to **backup your data** before flashing
          - ✅ Verify your device model matches: **${{ inputs.device }}**
          - ✅ Check that you have the correct recovery/flasher installed
          - ✅ If you encounter issues, try clean flashing
          
          ## 🔗 Links
          
          - **KernelSU Manager:** https://github.com/tiann/KernelSU
          - **Report Issues:** https://github.com/${{ github.repository }}/issues
          - **Source Code:** https://github.com/${{ github.repository }}
          
          ---
          
          **Build Date:** `$(date -u +"%Y-%m-%d %H:%M UTC")`  
          **Workflow:** `${{ github.workflow }}`  
          **Run:** `#${{ github.run_number }}`
          EOF

      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd release
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Create and push tag
          TAG="${{ steps.tag.outputs.tag }}"
          git tag "$TAG"
          git push origin "$TAG"
          
          # Create release
          gh release create "$TAG" \
            --title "🚀 ${{ inputs.device }} - $TAG" \
            --notes-file NOTES.md \
            --latest=false \
            "${{ steps.verify.outputs.zip }}" \
            SHA256SUMS.txt
          
          echo "✅ Release created: $TAG"
          echo "📦 Package: ${{ steps.verify.outputs.zip }}"
          echo "🔗 URL: https://github.com/${{ github.repository }}/releases/tag/$TAG"

      - name: Cleanup Old Releases
        continue-on-error: true
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "::group::Cleaning up old releases"
          
          # Keep only last 5 releases for this device
          DEVICE_PATTERN="${{ inputs.device }}"
          
          OLD_RELEASES=$(gh release list --limit 100 --json tagName,createdAt \
            --jq ".[] | select(.tagName | contains(\"$DEVICE_PATTERN\")) | .tagName" | \
            tail -n +6)
          
          if [ -z "$OLD_RELEASES" ]; then
            echo "ℹ️ No old releases to clean up"
          else
            echo "🗑️ Deleting old releases:"
            echo "$OLD_RELEASES" | while read -r tag; do
              echo "  - $tag"
              gh release delete "$tag" --yes --cleanup-tag 2>/dev/null || \
                echo "    ⚠️ Failed to delete $tag (may already be deleted)"
            done
          fi
          
          echo "::endgroup::"

      - name: Release Summary
        if: success()
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << EOF
          # 🎉 Release Created Successfully!
          
          ## 📦 Release Information
          
          **Tag:** [\`${{ steps.tag.outputs.tag }}\`](https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag }})
          
          ### Package Details
          
          | Property | Value |
          |----------|-------|
          | Device | \`${{ inputs.device }}\` |
          | Filename | \`${{ steps.verify.outputs.zip }}\` |
          | Size | ${{ steps.verify.outputs.size }} MB |
          | SHA256 | \`${{ steps.verify.outputs.sha256 }}\` |
          
          ### 🔗 Quick Links
          
          - [📥 Download Release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag }})
          - [🔐 Verify Checksum](https://github.com/${{ github.repository }}/releases/download/${{ steps.tag.outputs.tag }}/SHA256SUMS.txt)
          - [📖 Release Notes](https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag.outputs.tag }})
          
          ### ⚙️ Build Configuration
          
          | Option | Value |
          |--------|-------|
          | Hook Type | \`${{ inputs.HOOK }}\` |
          | Optimization | \`${{ inputs.optimize_level }}\` |
          | Baseband Guard | \`${{ inputs.LSM }}\` |
          | SUSFS Branch | \`${{ inputs.susfs_branch || 'auto' }}\` |
          
          ### 📊 Build Stats
          
          - **Workflow Run:** [#${{ github.run_number }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Commit:** [\`${{ github.sha }}\`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          - **Build Time:** $(date -u +"%Y-%m-%d %H:%M UTC")
          
          ---
          
          ✅ **Installation:** Flash via KernelSU Manager or Recovery  
          🔐 **Verify:** \`sha256sum -c SHA256SUMS.txt\`
          EOF

      - name: Failure Summary
        if: failure()
        run: |
          cat >> "$GITHUB_STEP_SUMMARY" << EOF
          # ❌ Release Failed
          
          The release creation process failed for **${{ inputs.device }}**.
          
          ## 🔍 Troubleshooting
          
          1. Check the [workflow logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          2. Verify the build artifacts were uploaded correctly
          3. Ensure GitHub token has proper permissions
                    
          ## 📋 Debug Information
          
          - **Device:** ${{ inputs.device }}
          - **Tag:** ${{ steps.tag.outputs.tag }}
          - **Workflow:** ${{ github.workflow }}
          - **Run:** #${{ github.run_number }}
          
          Please review the logs and try again.
          EOF
